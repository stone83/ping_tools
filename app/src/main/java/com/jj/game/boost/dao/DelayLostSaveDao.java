package com.jj.game.boost.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jj.game.boost.domain.DelayLostSave;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DELAY_LOST_SAVE".
*/
public class DelayLostSaveDao extends AbstractDao<DelayLostSave, Long> {

    public static final String TABLENAME = "DELAY_LOST_SAVE";

    /**
     * Properties of entity DelayLostSave.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Year = new Property(1, int.class, "year", false, "YEAR");
        public final static Property Month = new Property(2, int.class, "month", false, "MONTH");
        public final static Property Day = new Property(3, int.class, "day", false, "DAY");
        public final static Property Hour = new Property(4, int.class, "hour", false, "HOUR");
        public final static Property Minitue = new Property(5, int.class, "minitue", false, "MINITUE");
        public final static Property Second = new Property(6, int.class, "second", false, "SECOND");
        public final static Property Delay = new Property(7, String.class, "delay", false, "DELAY");
        public final static Property Lost = new Property(8, String.class, "lost", false, "LOST");
    }


    public DelayLostSaveDao(DaoConfig config) {
        super(config);
    }
    
    public DelayLostSaveDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DELAY_LOST_SAVE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"YEAR\" INTEGER NOT NULL ," + // 1: year
                "\"MONTH\" INTEGER NOT NULL ," + // 2: month
                "\"DAY\" INTEGER NOT NULL ," + // 3: day
                "\"HOUR\" INTEGER NOT NULL ," + // 4: hour
                "\"MINITUE\" INTEGER NOT NULL ," + // 5: minitue
                "\"SECOND\" INTEGER NOT NULL ," + // 6: second
                "\"DELAY\" TEXT," + // 7: delay
                "\"LOST\" TEXT);"); // 8: lost
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DELAY_LOST_SAVE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DelayLostSave entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getYear());
        stmt.bindLong(3, entity.getMonth());
        stmt.bindLong(4, entity.getDay());
        stmt.bindLong(5, entity.getHour());
        stmt.bindLong(6, entity.getMinitue());
        stmt.bindLong(7, entity.getSecond());
 
        String delay = entity.getDelay();
        if (delay != null) {
            stmt.bindString(8, delay);
        }
 
        String lost = entity.getLost();
        if (lost != null) {
            stmt.bindString(9, lost);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DelayLostSave entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getYear());
        stmt.bindLong(3, entity.getMonth());
        stmt.bindLong(4, entity.getDay());
        stmt.bindLong(5, entity.getHour());
        stmt.bindLong(6, entity.getMinitue());
        stmt.bindLong(7, entity.getSecond());
 
        String delay = entity.getDelay();
        if (delay != null) {
            stmt.bindString(8, delay);
        }
 
        String lost = entity.getLost();
        if (lost != null) {
            stmt.bindString(9, lost);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DelayLostSave readEntity(Cursor cursor, int offset) {
        DelayLostSave entity = new DelayLostSave( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // year
            cursor.getInt(offset + 2), // month
            cursor.getInt(offset + 3), // day
            cursor.getInt(offset + 4), // hour
            cursor.getInt(offset + 5), // minitue
            cursor.getInt(offset + 6), // second
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // delay
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // lost
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DelayLostSave entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setYear(cursor.getInt(offset + 1));
        entity.setMonth(cursor.getInt(offset + 2));
        entity.setDay(cursor.getInt(offset + 3));
        entity.setHour(cursor.getInt(offset + 4));
        entity.setMinitue(cursor.getInt(offset + 5));
        entity.setSecond(cursor.getInt(offset + 6));
        entity.setDelay(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLost(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DelayLostSave entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DelayLostSave entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DelayLostSave entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
